JS Objects
- store data in key-value pairs
- unlike arrays, objects have no order
- key/value pair
- property: value


Objectives
Understand objects conceptually
Write code using JS objects

Suppose I wanted to model a single person: name, age, and city

//I could use an array like this:
var person = ["Cindy", 32, "Missoula"];

//to retrieve the person's hometown:
person[2]; //this is not very meaningful code

//what if I accidentally reversed the order?
var person2 = ["Travis", "Los Angeles", 21];


This is a perfect use case for an OBJECT

var person = {
  name: "Cindy",
  age: 32,
  city: "Missoula"
};


RETRIEVING DATA
You have two choices: bracket notation and dot notation

var person = {
  name: "Travis",
  age: 21,
  city: "LA"
};

//bracket notation, similar to arrays:
console.log(person["name"]);

//dot notation:
console.log(person.name);
- shorter, simpler

var dog = {
  name: "Rusty",
  breed: "Mutt",
  age: 3
};

dog;
dog["age"];
dog.age


There are a few differences between the 2 notations:

//you cannot use dot notation if the property starts with a number
someObject.1blah //invalid
someObject["1blah"] //valid

//you can lookup using a variable with bracket notation
var str = "name";
someObject.str; //doesn't look for "name"
someObject[str]; //does evaluate str and looks for "name"

//you cannot use dot notation for property names with space
someObject.fav color; //invalid
someObject["fav color"];  //valid


UPDATING DATA
Just like an array: access a property and reassign it

var person = {
  name: "Travis",
  age: 21,
  city: "LA"
};

//to update age
person["age"] += 1;

//to update city
person.city = "London";
